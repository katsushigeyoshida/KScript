KScript

C言語風スクリプト言語

変数   : 型指定なし 実数または文字列(ダブルクォーテーション(")で囲む)
         a = 12.5;    a = "abcd";
配列   : 1次元配列    a[2] = 25;  a[m] = "abcd"; fruit["apple"] = 50;
         2次元配列    a[1,2] = 30; a[m,n] = 10:
         一括設定     a[] = { 1, 1, 5, 8 }
                      b[,] = { {1, 2, 3 }, { 2, 3, 4 } }
識別子 : 代入文　=, 文末 ;
演算子 : *, -, *, /, %(剰余), ^(べき乗),++,--,+=,-=,*=,/=,^=
関係演算子 : ==, !=, <, >, <=, >=
論理演算子 : &&, ||, !
制御文 : 代入文    : 変数/配列 = 変数|配列|値|文字列|関数|数式 ;
         if文      : if (条件) { 実行文 } [ else { 実行分 } ]
         while文   : while (条件) { 実行文 }
         for文     : for (初期値; 条件; 更新処理) { 実行文 }
         return文  : return 戻り値 ;
         break文   : break;
         continue文: continue;
関数定義 : 関数名(引数1, 引数2...) { 実行分; ... return 戻り値; }

プロクラムの構造
    main() {                        main関数(省略可)
        a = 3;                      代入文
        b = 2;
        c = add(a, b);              関数呼び出し
        print(a + b, " ", c);
    }
    add(c, d) {                     関数定義
        return c + d;
    }

文の書き方
    一つの文はセミコロン(;)で終了する

コメント
    // から行末までをコメントアウトする
    /* から */ もコメントアウトするこの場合は複数行になってもかまわない

変数
    値を格納するもので特に型指定の必要はなくて値としては実数と文字列が使える
    数値と文字列を足すと文字列として結合する(日本語可))
    a = 3;
    b = "abcd";
    c = a + b;
    print(c);    →  "3ABC"

配列
    複数のデータをまとめて扱うもので[ ]の中の数値を変えて値を格納する
    (配列のインデックスは０から始まる)
        a[0] = 10;
        a[1] = 20;
        a[2] = 30;
        a["apple"] = 10;
    値をまとめて設定するときは
        a[] = { 10, 20, 30 }
    2次元配列
        a[1,2] = 10;
        a[,] = { { 1, 2, 3}, {10, 20, 30} }
        person["name",] = { "name", age, "address" }

演算子
    数式を処理するための演算子
    +,-,*,/,%,^ : 加算,減算,乗算,除算,剰余,べき乗
複合演算子
    2つの演算子を組み合わせて演算をおこなう
    +=,^=,*=,/=,%=,^=,++,--
    a += 2;  →  a = a + 2;
    a++;  →  a = a + 1;
比較演算子
    条件部の中で２つの値を比較する演算子
    ==, !=, <, >, <=, >=　: 等しい,等しくない,小さい,大きい,小さいか等しい,大きいか等しい
    if (a == b) print(a);
論理演算子
    比較演算子の結果を演算する
    &&,||,! : aかつb , aまたはb , aではない

※ 論理演算子と比較演算子が混在する場合、優先順位がつかないので括弧をつけて優先順位をつける
    a > 10 && a < 20  →  (a > 10) && (a < 20)

制御文
    if文     : 条件によって分岐させる
        if (条件) { 実行文; } [ else { 実行文; }]
    while文  : 条件に入っている間繰り返す
        while (条件) { 実行文; }
    for文    : 初期値、条件、増分を指定して繰り返す
        for (初期値; 条件; 増分) { 実行文; }
    return文 : 処理を中断して呼出し元に変える
        return (戻り値);
    break文  : ループの中断
    continue文   : ループの先頭に戻る

関数の定義
    複数の文をまとめて実行する仕組み(日本語可)
    関数名(引数1, ...) { 実行文; ... return 返値; }
        add(a, b) {
            c = a + b;
            return c;
        }
    呼出し側
        s = 2;
        t = 3;
        sum = add(s, t);
    引数に配列を使う場合
        sum(a[]) {
            size = arraySize(a[]);
            sum = 0;
            for (i = 0; i < size; i++) {
                sum += a[i];
            }
            return sum;
        }
    呼出し側
        array[] = { 1, 2, 3, 4, 5 }
        total = sum(array[]);

ディレクティブ
    #include [スクリプトファイル名];

数式処理以外の関数
    print(a, b, "\n");              : コンソールに文字出力
    a = input();                    : コンソールからの文字列入力
    c = contain(a[2]);              : 配列の有無(0:なし 1:あり)
    size = count(a[]);              : 配列のサイズ
    size = count(a[,]);             : 2次元配列の全体の数
    size = count(a[1,]);            : 2次元配列(2行目)の列数
    max = max(a[]);                 : 配列の最大値
    min = min(a[,]);                : 配列の最小値
    sum = sum(a[]);                 : 配列の合計
    ave = average(a[,]);            : 配列の平均
    vari = variance(a[]);           : 分散
    std = stdDeviation(a[]);        : 標準偏差
    cov = covariance(a[], b[]);     : 共分散
    clear(a[]);                     : 配列をクリア
    remove(a[],st[,ed]);            : 配列の要素削除(1次元のみ)
    sort(a[]);                      : 配列のソート(1次元のみ)
    reverse(a[]);                   : 配列の逆順化(1次元のみ)
    a[,] = unitMatrix(size);        : 単位行列
    d[,] = matrixTranspose(a[,]);   : 転置行列
    d[,] = matrixMulti(a[,], b[,]); : 行列の積
    d[,] = matrixAdd(a[,], b[,]);   : 行列の和
    d[,] = matrixInverse(a[,]);     : 逆行列 a^-1
    d[,] = copyMatrix(a[,]);        : 行列のコピー

構文処理方法
    一般に構文解析は 2分木でデータを構成し処理するが、ここでは再帰処理を用いて
    構文の処理を行う。

    スクリプト文 → 字句解析(KLexer) → 構文解析(KParse) → 構文処理(Script)

数式処理 : YCalc.expression(式) を呼び出す

実行方法
    Script script = new Script(scriptData);     //  プログラムコードの読込
    script.execute("main");                     //  プログラムの実行

    scriptData : プログラムコード (string)
    execute(関数名) : 最初に実行する関数を指定、コードに関数がない時はコードの最初から実行

機能追加(検討)
    a[a,] = { 1, 2, 3, "abc" }
    min,max,average(mean),median,variance,standard diation,
    配列の挿入、削除、squeeze
    テキストファイルの読み書き
    多次元配列
    グラフィック表示、グラフ表示、表の編集、3Dグラフィック表示(Winアプリ)
    数値計算関数(行列、3次方程式、4次方程式、最小2乗法、Σx、Σx^2、Σx*y)
    Ctrl+Cによる中断機能
    デバッグ機能
    puase関数(デバッグ用,input関数で代用)
    時間関数、乱数関数
    変数に.xxx()の機能(a.Length(), a.toLower()...)
    配列変数の時(a[].sum(),a[].min(), a[].minBy()...)
    do文,switch文
    コレクション map,set,push
    web関連

問題点(バグ)
    コードミスのエラーが検出できない
    数式処理の中に配列引数のプログラム関数が使えない(2024/09/18)

履歴
2024/09/26 統計陽関数追加、Ctrl+Cで中断
2024/09/21 #include文の追加
2024/09/20 エラー処理の追加
2024/09/20 Consoleでの編集機能追加
2024/09/12 マトリックス関数追加
2024/08/20 2次元配列に対応
2024/08/18 break, continue を追加
2024/08/17 とりあえず動作するもの
2024/08/07 作成開始

おまけ(コンソールでのテスト環境)
Test Program(main)のコマンド
    load            : スクリプトファイルの選択
    list            : スクリプトの表示
    execute [option]: スクリプトの実行([debug,console])
    quit            : 終了
    editor          : スクリプトの編集
    help            : ヘルプ
    help [calc]     : 関数ヘルプ
    [数式]          : 数式処理
    [CR]            : スクリプトファイルの選択

editor コマンド
    add [文字列]              追加
    list                      リスト表示
    list start,end            行数指定のリスト表示
    insert No [文字列]        No行に挿入
    remove start,end          行削除
    move line1,line2          line1からline2に移動
    search [文字列]           検索
    replace [文字列],[文字列] 置換え
    clear                     すべて削除
    load [パス]               ファイルの読込
    save [パス]               ファイルの保存
    execute                   スクリプトの実行
    calculate [数式]          数式の計算処理
    help                      ヘルプ
    quit                      終了

数式関数一覧
    "PI             円周率",
    "E              自然対数の底",
    "RAD(x)         度をラジアンに変換する",
    "DEG(x)         ラジアンを度に変換する",
    "deg2hour(x)    度を時単位に変換する",
    "hour2deg(x)    時単位を度に変換する",
    "rad2hour(x)    ラジアンを時単位に変換する",
    "hour2rad(x)    時単位をラジアンに変換する",
    "mod(x,y)       剰余(割算の余り",
    "pow(x,y)       累乗",
    "max(x,y)       大きい方",
    "min(x,y)       小さい方",
    "combi(n,r)     組合せの数(nCr)",
    "permu(n,r)     順列の数(nPr)",
    "sin(x)         正弦",
    "cos(x)         余弦",
    "tan(x)         正接",
    "asin(x)        逆正接",
    "acos(x)        逆余弦",
    "atan(x)        逆正接",
    "atan2(x,y)     逆正接",
    "sinh(x)        双曲線正弦",
    "cosh(x)        双曲線余弦",
    "tanh(x)        双曲線正接",
    "asinh(x)       逆双曲線正弦",
    "acosh(x)       逆双曲線余弦",
    "atanh(x)       逆双曲線正接",
    "exp(x)         eの累乗",
    "ln(x)          eを底とする自然対数",
    "log(x)         10を底とする対数",
    "log(x,y)       xを底とするyの対数",
    "sqrt(x)        平方根",
    "abs(x)         絶対値",
    "ceil(x)        切上げ(x以上で最小の整数値)",
    "floor(x)       切捨て(小数点以下の数の内最大の整数値)",
    "round(x)       四捨五入(もっとも近い整数値)",
    "trunc(x)       浮動小数点の整数部",
    "sign(x)        符号示す値(1/0/-1)",
    "round(x,y)     yの倍数に丸める",
    "equals(x,y)    等価判定 x==y ⇒ 1,x!=y ⇒ 0",
    "lt(x,y)        大小判定(less than) x > y ⇒ 1,以外は0",
    "gt(x,y)        大小判定(greater than) x < y ⇒ 1,以外は0",
    "compare(x,y)   大小判定 x > y ⇒ 1,x==y ⇒ 0,x<y ⇒ -1",
    "deg2dms(x)     度(ddd.dddd) → 度分秒(ddd.mmss)",
    "dms2dig(x)     度分秒(ddd.mmss) → 度(ddd.dddd)",
    "hour2hms(x)    時(hh.hhhh) → 時分秒(hh.mmss)",
    "hms2hour(x)    時分秒(hh.mmss) → 時(hh.hhhh)",
    "fact(x)        階乗",
    "fib(x)         フィボナッチ数列",
    "gcd(x,y)       最大公約数",
    "lcm(x,y)       最小公倍数",
    "JD(y,m,d)      西暦年月日からユリウス日を求める",
    "MJD(y,m,d)     西暦年月日から準ユリウス日を求める",
    "JD2Date(x)     ユリウス日を年月日に変換して yyyymmdd の実数にする",
    "sum(f([@]),n,k) 級数の和 nからkまで連続し値を計算式f([@])で演算した値の合計を求める",
    "sum(f([@]),n1,n2...nm) 級数の和 n1からnmまで値を計算式f([@])で演算した値の合計を求める",
    "product(f([@]),n,k) 級数の積 nからkまで連続し値を計算式f([@])で演算した値の積を求める",
    "product(f([@]),,n1,n2...nm) 級数の積 n1からnmまで値を計算式f([@])で演算した値の積を求める",
    "repeat(f([@],[%]),i,n,k) 計算式の[@]にnからkまで入れて繰返す,[%]に計算結果が入る,iは[%]の初期値",

…or create a new repository on the command line

echo "# KScript" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/katsushigeyoshida/KScript.git
git push -u origin main

…or push an existing repository from the command line

git remote add origin https://github.com/katsushigeyoshida/KScript.git
git branch -M main
git push -u origin main
